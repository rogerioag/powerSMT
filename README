SS_SMT 1.0 Release

It is the first release of SS_SMT 1.0. It is a beta version to execute SS code in a SMT simulator. It is not completly reviewed and no support is provides. It is free.

This simulator was adapted by Ronaldo A. L. Goncalves using the original 
SimpleScalar 3.0 Tool that is a part of the SimpleScalar tool suite 
written by Todd M. Austin as a part of the Multiscalar Research Project.

Contact: ronaldo@din.uem.br (http://www.din.uem.br/~ronaldo) 

The SimpleScalar suite is currently maintained by Doug Burger and Todd M. Austin.
  
  INTERNET: dburger@cs.wisc.edu
  US Mail:  1210 W. Dayton Street, Madison, WI 53706
 
  SimpleScalar Copyright (C) 1994, 1995, 1996, 1997, 1998 by Todd M. Austin

To use SS SMT follow the steps (you can issue only ss_smt to view a brief
description of the simulator):

1) uncompress the compressed file

2) execute make (some warnings will appear - don't panic)

3) cd tests

4) ./run_it (some tests will run)

5) To run the simulator, execute the follow command:

ss_smt <x1> <x2> {options} batch file

ss_smt 11 12 {options} RUN_SPEC95


which:

<x1> : initial line to consider from <batch file> (ignoring blank and
comentaries lines)
<x2> : final line to consider from <batch file> (ignoring blank and comentaries
lines)
{options} : original options from sim-outorder plus some new ones
<batch file> : text file: each line must be
               a command line for one application that will
               be executed for each slot

Please note, that, in order to execute more than one thread per time, your l1 cache configuration must have
the number of banks or associativity greater or equal to the number of threads. For example, to run the simulator 
with 4 threads you should configurate your cache il1 like that: 

-cache:il1 il1:4:xx:xx:xx:x (4 banks)
-cache:il1 il1:1:xx:xx:xx:4 (1 bank and 4 ways)
-cache:il1 il1:2:xx:xx:xx:2 (2 banks and 2 ways)


The only applications which are available are in the /tests directory
These applications are part of original SimpleScalar 3.0 tool.

All rights from SimpleScalar 3.0 must be preserved.

=============================================================
Parameters:
  -bpred:type forced:n : force the bpred accuracy to n (%: 100 = 100%)
   for example: -bpred:type forced:93 (93% accuracy)
   
  -ruulsq:type distributed | shared : Estações de reserva (RUU) distribuídas por unidades funcionais ou compartilhadas entre elas.  
  
  -fu:type hetero | homo :
  
  -imodules:num 2




SIMPLESCALAR 3.0 OVERVIEW:

This README file is for the SimpleScalar simulator release 3.0.  This release
is available from:

	http://www.cs.wisc.edu/~mscalar/simplescalar.html

in the file simplesim-3.0.tar.gz.


TO INSTALL:

The following details how to build and install the SimpleScalar simulators:

	a) vi Makefile

	Make sure all compile options are set for your host, we've listed
	the options for the OS/compiler combinations that were tested,
	uncomment one of these if appropriate.  You'll likely not have to
	change anything for the supported hosts, and if you need to change
	anything, it will likely be the CC variable (which specifies
	the ANSI C compiler to use to build the simulators).  NOTE: the
	simulators must be built with an ANSI-C compatible compiler, if you
	have problems with your compiler, try using GNU GCC as it is known
	to build the simulators on all the supported platforms.

	b) make config-pisa			(to build SimpleScalar/PISA)
	   or
	   make config-alpha			(to build SimpleScalar/Alpha)

	Execute one of the above commands to configure the SimpleScalar
	build.  The SimpleScalar/PISA build executes SimpleScalar PISA
	(Portable ISA) binaries (the old "SimpleScalar ISA"), and the
	SimpleScalar/Alpha build executes statically linked Alpha OSF
	binaries.  If building with MS VC++ on Windows NT, first delete
	the symbolic link "tests/".

	c) make

	This builds the simplescalar simulators.

	d) make sim-tests

	This tests the simulators, this step will take anywhere from ~5 min
	to an hour, depending on the performance of your host.  Inspect the
	output of this command, when the script diff's the outputs of the
	simulators against the known good outputs, there should be no
	differences.

	e) vi pipeview.pl textprof.pl

	Configure these two perl scripts by placing the location of your
	perl executable on the first line of each script.


BUILDING BINARIES FOR SIMPLESCALAR

SimpleScalar/PISA binaries must be built using the SimpleScalar GNU tool
chain (e.g., GCC, GAS, GLD), available from:

    http://www.cs.wisc.edu/~mscalar/simplescalar.html

Prebuilt SimpleScalar PISA (Portable ISA) binaries, for big- and
little-endian hosts, are also available from that site.

SimpleScalar/Alpha binaries must be built on Digitial Alpha OSF Unix (or
with a suitable cross compiler).  Any Alpha OSF Unix compiler should
work, however, the binaries must be statically linked.  To statically
link a binary, add the "-static" flag to the link line of GNU GCC, or add
"-non_shared" to the link line of the DEC compilers.  NOTE: if you get
a "dnet_conn not found" error when linking Alpha OSF binaries, add
"-ldnet_stub" to your link line.


PUBLISHING PAPERS WITH SIMPLESCALAR

When publishing a paper with SimpleScalar results, please refer to the
specific target you use as "SimpleScalar/PISA" or "SimpleScalar/Alpha".
In addition, please make reference to the latest SimpleScalar report,
this reference is available from:

    http://www.cs.wisc.edu/~mscalar/simplescalar.html

Above all, please use good judgement when doing research with the
SimpleScalar tool set.  Before publishing any numbers you should validate
your results.  Use the pipetrace facility, combined with microbenchmarks,
to test our code, your code, and your intuitions.  If the simulators are
not appropriate for your experiments, build a new simulator or use
another more appropriate simulation tool set.  The SimpleScalar tool set
is not appropriate for all computer architecture research, and it's
certainly not any substitute for good science.


USING SIMPLESCALAR FOR INSTRUCTION

Many instructors have found the SimpleScalar tools useful in their
courses.  To make this process as painless as possible, we've made
available an instructors kit that includes pre-built binaries with
small-ish inputs.  Also included are directions on how to build and
run the experiments, suggested projects at all levels, and slides
that the instructor can use to introduce students to the Simplescalar
tool set.  The instructions kit is available from TBD...


FOR MORE INFORMATION:

For general documentation on the tool set, see the hacker's guide in the
file "hack_guide.{pfd,ps,ppt}".  Frequently asked questions are answered
in the FAQ file.  And suggested projects are listed in the file PROJECTS.
The simulators (the sim-* executables) are self-documenting, just run
them with the "-h" flag.

To get plugged into the SimpleScalar scene, join the SimpleScalar mailing
list (simplescalar@cs.wisc.edu) by sending e-mail to
majordomo@cs.wisc.edu, with the message body (not the subject header)
containing "subscribe simplescalar".  Also watch the SimpleScalar web
page at:

	http://www.cs.wisc.edu/~mscalar/simplescalar.html

And please send up your comments regarding this tool set, we are
continually trying to improve it and we appreciate your input.

Best Regards,

Todd Austin (taustin@ichips.intel.com), Intel MicroComputer Research Labs
Doug Burger (dburger@cs.wisc.edu), UW-Madison Computer Sciences Department
